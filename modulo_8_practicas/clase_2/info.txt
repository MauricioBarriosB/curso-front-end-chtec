
// para ver el arbol de cambios de git:

git log --oneline --decorate --graph --all






¿Qué es DevOps y cuál es su propósito principal?
¿Qué es el modelo CAMS y su importancia en la cultura DevOps?
¿Cuál es la diferencia entre Integración Continua y Entrega Continua?
¿Qué beneficios aporta la Integración Continua al proceso de desarrollo de software?
¿Qué es un contenedor y en qué se diferencia de una máquina virtual?
¿Cuáles son los beneficios del uso de Docker en entornos DevOps?
¿Cuáles son los tipos de pruebas más importantes en un pipeline de CI/CD?
¿En que consiste el desarrollo guiado por pruebas (TDD) y su impacto enCI/CD?
¿Qué es Infraestructura como Código (IaC) y qué ventajas ofrece?
¿Por qué es importante el monitoreo en DevOps?, puedes mencionar al menos dos herramientas de monitoreo utilizadas en entornos CI/CD?
¿Cuál es el propósito de un orquestador de contenedores como Kubernetes?
¿Como es que Kubernetes facilita la escalabilidad y gestión de aplicaciones en producción?




Necesito responder las siguientes preguntas de integración continua y despliegue continuo para proyecto desarrollo de una pagina web de un hospital, que debo desarrollar en React JS y MySQL, cuyos requerimientos son creación de sistema de autenticación de usuarios, mantenedor de doctores, mantenedor de pacientes y mantenedor de citas medicas:

1.Explicación de cómo configurarían un pipeline de CI/CD utilizando GitHub Actions.
2.Describir pasos para integrar pruebas automatizadas en el pipeline.
3.¿Cómo implementarían Docker en el proyecto?
4.Describir ventajas de utilizar Docker y Kubernetes en el despliegue del sistema de hospital.
5.Describir estrategias para monitorear logs y métricas del sistema.
6.Describir uso de herramientas de monitoreo como ELK Stack o Prometheus para asegurar la estabilidad del proyecto.



### Cuestionario sobre Integración Continua y Despliegue Continuo  

#### 1. **¿Qué es DevOps y cuál es su propósito principal?**  
**Respuesta:**  
DevOps es una cultura y conjunto de prácticas que busca unificar el desarrollo de software (**Dev**) y las operaciones de TI (**Ops**) para acelerar el ciclo de vida de entrega de software. Su propósito principal es mejorar la colaboración, automatizar procesos, aumentar la eficiencia y garantizar entregas más rápidas y confiables.  

#### 2. **¿Qué es el modelo CAMS y su importancia en la cultura DevOps?**  
**Respuesta:**  
CAMS es un modelo que representa los pilares de DevOps:  
- **Cultura (Culture):** Colaboración entre equipos.  
- **Automatización (Automation):** Eliminar tareas manuales.  
- **Medición (Measurement):** Métricas para mejorar procesos.  
- **Compartir (Sharing):** Transparencia y retroalimentación.  
Su importancia radica en que proporciona un marco para implementar DevOps de manera efectiva.  

#### 3. **¿Cuál es la diferencia entre Integración Continua y Entrega Continua?**  
**Respuesta:**  
- **Integración Continua (CI):** Automatiza la integración de cambios de código en un repositorio compartido varias veces al día, incluyendo pruebas automáticas.  
- **Entrega Continua (CD):** Extiende la CI al automatizar la preparación del código para su despliegue en producción (pero no lo despliega automáticamente).  
- *(Nota: "Despliegue Continuo" sí despliega automáticamente en producción si pasa todas las pruebas).*  

#### 4. **¿Qué beneficios aporta la Integración Continua al proceso de desarrollo de software?**  
**Respuesta:**  
- Detecta errores temprano.  
- Reduce conflictos en el código.  
- Acelera el tiempo de entrega.  
- Mejora la calidad del software.  
- Facilita la colaboración entre equipos.  

#### 5. **¿Qué es un contenedor y en qué se diferencia de una máquina virtual?**  
**Respuesta:**  
- **Contenedor:** Empaqueta una aplicación con sus dependencias y bibliotecas en una unidad aislada que se ejecuta sobre el kernel del sistema operativo anfitrión.  
- **Diferencia con VM:**  
  - Las VM incluyen un SO completo y requieren hipervisor.  
  - Los contenedores son más ligeros, rápidos y consumen menos recursos.  

#### 6. **¿Cuáles son los beneficios del uso de Docker en entornos DevOps?**  
**Respuesta:**  
- Portabilidad ("funciona en mi máquina" ya no es un problema).  
- Aislamiento de aplicaciones.  
- Escalabilidad rápida.  
- Integración con herramientas de CI/CD (ej. Jenkins, GitLab CI).  
- Uso eficiente de recursos comparado con VMs.  

#### 7. **¿Cuáles son los tipos de pruebas más importantes en un pipeline de CI/CD?**  
**Respuesta:**  
- **Pruebas unitarias** (validan componentes individuales).  
- **Pruebas de integración** (comprueban interacción entre módulos).  
- **Pruebas de regresión** (verifican que cambios no rompan funcionalidad existente).  
- **Pruebas de rendimiento** (evalúan escalabilidad y velocidad).  
- **Pruebas de seguridad** (ej. SAST/DAST).  

#### 8. **¿En qué consiste el desarrollo guiado por pruebas (TDD) y su impacto en CI/CD?**  
**Respuesta:**  
- **TDD** es una metodología donde primero se escriben pruebas (fallidas) y luego el código para pasarlas.  
- **Impacto en CI/CD:**  
  - Mejora la cobertura de pruebas.  
  - Facilita la detección temprana de bugs.  
  - El código suele ser más modular y mantenible.  

#### 9. **¿Qué es Infraestructura como Código (IaC) y qué ventajas ofrece?**  
**Respuesta:**  
- **IaC** es la gestión de infraestructura (servidores, redes, etc.) mediante archivos de configuración versionables (ej. Terraform, Ansible).  
- **Ventajas:**  
  - Consistencia y reproducibilidad de entornos.  
  - Automatización de despliegues.  
  - Reducción de errores manuales.  
  - Escalabilidad bajo demanda.  

#### 10. **¿Por qué es importante el monitoreo en DevOps? Menciona al menos dos herramientas.**  
**Respuesta:**  
- **Importancia:**  
  - Detección proactiva de fallos.  
  - Optimización de rendimiento.  
  - Cumplimiento de SLAs.  
- **Herramientas:** Prometheus, Grafana, ELK Stack (Elasticsearch, Logstash, Kibana), Datadog.  

#### 11. **¿Cuál es el propósito de un orquestador de contenedores como Kubernetes?**  
**Respuesta:**  
Automatizar el despliegue, escalado y gestión de contenedores en clusters, asegurando:  
- Alta disponibilidad.  
- Balanceo de carga.  
- Autorrecuperación (self-healing).  
- Escalabilidad automática.  

#### 12. **¿Cómo facilita Kubernetes la escalabilidad y gestión de aplicaciones en producción?**  
**Respuesta:**  
- **Escalabilidad:** Ajusta automáticamente el número de réplicas de contenedores según la demanda (Horizontal Pod Autoscaler).  
- **Gestión:**  
  - Distribuye cargas entre nodos.  
  - Gestiona actualizaciones sin downtime (rolling updates).  
  - Monitoriza el estado de los pods y los reinicia si fallan.  

---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  ---  --- 

Informe Aplicado a Proyecto Hospital

# Configuración de CI/CD para Proyecto Hospital en React JS y MySQL

## 1. Pipeline de CI/CD con GitHub Actions

Para configurar un pipeline de CI/CD con GitHub Actions para este proyecto de hospital:

1. **Crear workflows en `.github/workflows`**:
   - `ci.yml` para integración continua
   - `cd.yml` para despliegue continuo

2. **Configuración básica del workflow de CI**:
```yaml
name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
        
    - name: Install dependencies
      run: npm install
      
    - name: Run tests
      run: npm test
      
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build project
      run: npm run build
```

3. **Configuración básica del workflow de CD**:
```yaml
name: CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    needs: ci_pipeline
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build project
      run: npm run build
      
    - name: Deploy to production
      uses: some-deployment-action
      with:
        target: production-server
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}  Pasos para integrar pruebas automatizadas en el pipeline.
```

## 2. Integración de pruebas automatizadas

Para integrar pruebas automatizadas en el pipeline:

1. **Tipos de pruebas a incluir**:
   - Pruebas unitarias (Jest)
   - Pruebas de componentes (React Testing Library)
   - Pruebas E2E (Cypress)

2. **Configuración de pruebas**:
```yaml
- name: Run unit tests
  run: npm test -- --coverage

- name: Run component tests
  run: npm run test:components

- name: Run E2E tests
  run: npm run test:e2e
  env:
    TEST_ENV: ci
    DB_TEST_URL: ${{ secrets.TEST_DB_URL }}
```

3. **Umbrales de cobertura** (en package.json):
```json
"jest": {
  "coverageThreshold": {
    "global": {
      "branches": 80,
      "functions": 80,
      "lines": 80,
      "statements": 80
    }
  }
}
```

## 3. Implementación de Docker en el proyecto

**Estructura de Dockerización**:

1. **Frontend (React) - Dockerfile**:
```dockerfile
# Build stage
FROM node:16 as builder
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

# Production stage
FROM nginx:alpine
COPY --from=builder /app/build /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

2. **Backend (Node.js/API) - Dockerfile**:
```dockerfile
FROM node:16
WORKDIR /app
COPY package*.json ./
RUN npm install --production
COPY . .
EXPOSE 3000
CMD ["node", "server.js"]
```

3. **MySQL - Dockerfile**:
```dockerfile
FROM mysql:8.0
ENV MYSQL_ROOT_PASSWORD hospital_root
ENV MYSQL_DATABASE hospital_db
ENV MYSQL_USER hospital_user
ENV MYSQL_PASSWORD hospital_pass
COPY init.sql /docker-entrypoint-initdb.d/
EXPOSE 3306
```

4. **docker-compose.yml**:
```yaml
version: '3.8'

services:
  frontend:
    build: ./frontend
    ports:
      - "80:80"
    depends_on:
      - backend
      
  backend:
    build: ./backend
    ports:
      - "3000:3000"
    environment:
      DB_HOST: db
      DB_USER: hospital_user
      DB_PASS: hospital_pass
      DB_NAME: hospital_db
    depends_on:
      - db
      
  db:
    build: ./database
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      
volumes:
  mysql_data:
```

## 4. Ventajas de Docker y Kubernetes

**Ventajas de Docker**:
- **Consistencia**: Mismo entorno en desarrollo, testing y producción
- **Aislamiento**: Cada servicio (frontend, backend, DB) corre en contenedores separados
- **Portabilidad**: Fácil despliegue en cualquier sistema con Docker
- **Escalabilidad**: Fácil replicación de contenedores

**Ventajas de Kubernetes** para el sistema de hospital:
- **Alta disponibilidad**: Auto-reparación de contenedores fallidos
- **Escalado automático**: Aumento de instancias según demanda (ej: horas pico)
- **Gestión de configuraciones**: Secretos para credenciales de DB
- **Actualizaciones sin downtime**: Rolling updates para el frontend
- **Balanceo de carga**: Distribución de tráfico entre instancias

## 5. Estrategias para monitoreo de logs y métricas

**Estrategias de monitoreo**:

1. **Centralización de logs**:
   - Envío de logs de frontend (Nginx), backend (Node.js) y MySQL a un sistema central
   - Uso de Filebeat/Fluentd para recolección

2. **Métricas clave**:
   - Tiempos de respuesta de API
   - Uso de CPU/memoria por contenedor
   - Errores HTTP (4xx, 5xx)
   - Consultas lentas a MySQL
   - Disponibilidad de servicios

3. **Alertas**:
   - Configurar umbrales para métricas críticas
   - Notificaciones a Slack/Email para incidentes

4. **Dashboard**:
   - Visualización unificada de métricas y logs
   - Grafana para métricas, Kibana para logs

## 6. Uso de herramientas de monitoreo

**ELK Stack (Elasticsearch, Logstash, Kibana)**:
1. **Implementación**:
   - Logstash recibe logs de todos los servicios
   - Elasticsearch indexa y almacena los logs
   - Kibana para visualización y análisis

2. **Beneficios**:
   - Búsqueda rápida en logs históricos
   - Detección de patrones de error
   - Análisis de tráfico por hora/día

**Prometheus + Grafana**:
1. **Implementación**:
   - Prometheus recolecta métricas de Node.js, Nginx y MySQL
   - Grafana para dashboards visuales
   - Alertmanager para notificaciones

2. **Beneficios**:
   - Monitoreo en tiempo real del rendimiento
   - Detección temprana de cuellos de botella
   - Capacidad de correlacionar métricas

**Configuración para el proyecto hospital**:
- Priorizar métricas de disponibilidad (uptime)
- Monitorear tiempos de respuesta en módulos críticos (agendamiento)
- Alertar sobre fallas en autenticación
- Seguir historial de cambios en registros médicos 




Cultura (Culture): Colaboración entre equipos.  
Automatización (Automation): Eliminar tareas manuales.  
Medición (Measurement): Métricas para mejorar procesos.  
Compartir (Sharing): Transparencia y retroalimentación.  



